<div class="card mt-3 p-3">
    {% set count = rows.count %}
    <p>Колличество: {{count}} записей </p>

    <input type="number"  class="form-control mb-3"  name="row" data-track-input data-request="onLoadRow"
           data-request-data="'name':'{{file.disk_name}}'"
    >

    <div class="table-responsive">

    <table class="table table-bordered">
        <thead>
            <tr class="columns">
                {% for key, name in rows[0] %}
                    <th data-id="{{key}}" onclick="insertColumn('column-'+{{key}})">{{name}}
<!--                    <span class="badge badge-danger">column-{{key}}</span>-->
                    </th>
                {% endfor %}
            </tr>
        </thead>
         <tbody id="rowBody">
            {% partial '@_row' rows="rows" index=2 %}
        </tbody>



    </table>
    </div>
    <form action="" data-request="onSave" id="my-form">
        <div class="text-right mt-2">
            <button class="btn btn-primary mt-3" >Сохранить</button>
            <button class="btn btn-danger mt-3" data-request="onImport" >Начать</button>
        </div>

        <textarea name="config" class="form-control mt-3 mb-3 yaml-code"  rows="15">{{file.description}}</textarea>
        <input type="hidden" name="name" value="{{file.disk_name}}">
    </form>
    <div class="error-logs">

    </div>
</div>

<script>
    var myTextarea = document.querySelector('.yaml-code')
    var editor = CodeMirror.fromTextArea(myTextarea, {
        lineNumbers: true,               // показывать номера строк
        matchBrackets: true,             // подсвечивать парные скобки
        mode: 'text/x-yaml', // стиль подсветки
        indentUnit: 2,
        extraKeys: {
            "Ctrl-Space": "autocomplete",
            "Ctrl-S": function(instance) {
                $("#my-form").submit();
            },
        }
    });

    editor.setSize(1000, 800);

    var slider = document.querySelector('.table-responsive');
    var isDown = false;
    var startX;
    var scrollLeft;

    slider.addEventListener('mousedown', (e) => {
        isDown = true;
        slider.classList.add('active');
        startX = e.pageX - slider.offsetLeft;
        scrollLeft = slider.scrollLeft;
    });
    slider.addEventListener('mouseleave', () => {
        isDown = false;
        slider.classList.remove('active');
    });
    slider.addEventListener('mouseup', () => {
        isDown = false;
        slider.classList.remove('active');
    });
    slider.addEventListener('mousemove', (e) => {
        if(!isDown) return;
        e.preventDefault();
        const x = e.pageX - slider.offsetLeft;
        const walk = (x - startX) * 3; //scroll-fast
        slider.scrollLeft = scrollLeft - walk;
    });

    // editor.on('cursorActivity', function(){
    //     var options = {
    //         hint: function() {
    //             return {
    //                 from: editor.getDoc().getCursor(),
    //                 to: editor.getDoc().getCursor(),
    //                 list: [
    //                     {% for key, name in rows[0] %}
    //                       'column-{{key}}',
    //                     {% endfor %}
    //                 ]
    //             }
    //         }
    //     };
    //     editor.showHint(options);
    // });

    function insertColumn(text){
        editor.replaceSelection(text, focus);
        editor.focus();
    }


</script>

<style>
    .table-responsive{
        cursor: pointer;
    }
    .table-responsive.active{
        cursor: grabbing;
    }
    .table td, .table th {
          text-overflow: ellipsis;
            overflow: hidden;
            width: 160px;
            height: 1.2em;
            white-space: nowrap;
            max-width: 300px;

    }
    .table th:hover{
        background: #eee;
    }
</style>
